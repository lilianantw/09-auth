import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥
async function verifySession(token: string | undefined) {
  if (!token) return { valid: false };

  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/refresh`, {
      method: "POST",
      headers: { Cookie: `token=${token}` },
      credentials: "include",
    });

    if (res.ok) {
      // —è–∫—â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
      const setCookie = res.headers.get("set-cookie");
      return { valid: true, setCookie };
    }

    return { valid: false };
  } catch (err) {
    return { valid: false };
  }
}

export async function middleware(req: NextRequest) {
  const token = req.cookies.get("token")?.value;
  const { pathname } = req.nextUrl;

  const isAuthPage =
    pathname.startsWith("/sign-in") || pathname.startsWith("/sign-up");

  const isPrivatePage =
    pathname.startsWith("/profile") || pathname.startsWith("/notes");

  // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥
  const session = await verifySession(token);

  // üîπ –Ø–∫—â–æ –Ω–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /sign-in
  if (!session.valid && isPrivatePage) {
    return NextResponse.redirect(new URL("/sign-in", req.url));
  }

  // üîπ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ sign-in / sign-up ‚Üí —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /
  if (session.valid && isAuthPage) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  // üîπ –Ø–∫—â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä–Ω—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–∫–µ–Ω ‚Üí –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  const res = NextResponse.next();
  if (session.setCookie) {
    res.headers.set("set-cookie", session.setCookie);
  }

  return res;
}

export const config = {
  matcher: ["/profile", "/notes/:path*", "/sign-in", "/sign-up"],
};
